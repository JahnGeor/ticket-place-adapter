plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '2.25.0'
//    id 'org.beryx.runtime' version "1.13.1"
    id 'gg.jte.gradle' version '3.0.3'
}

group = 'ru.kidesoft'
version = '2.0.0'

application {
    mainClass = 'ru.kidesoft.desktop.DesktopApplication'
    applicationName = 'Ticket Place'
    version = '2.0.0'
}



jte {
    generate()
    //precompile()
}

tasks.jar {
    dependsOn(tasks.generateJte)
    from(fileTree("jte-classes") {
        include("**/*.class")
        include("**/*.bin")
    })
}

java {
    sourceCompatibility = '17'
}

javafx {
    version = '17.0.11'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.graphics']
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("gg.jte:jte:3.0.3")

    implementation 'net.datafaker:datafaker:2.2.2'
    implementation 'org.controlsfx:controlsfx:11.2.1'



    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1')
    implementation('org.kordamp.ikonli:ikonli-fluentui-pack:12.3.1')
    implementation('org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1')
    implementation 'net.rgielen:javafx-weaver-spring:1.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}



jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
    }
}
//
//runtime {
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    modules.set(["java.desktop", "jdk.unsupported", "java.scripting", "java.logging", "java.xml", "java.net.http"])
//
//    launcher {
//        noConsole = true
//    }
//    jpackage {
//        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
//        // targetPlatformName = "mac"
//
//        def currentOs = org.gradle.internal.os.OperatingSystem.current()
//       // def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
//        //imageOptions += ['--icon', "src/main/resources/assets/img/icon.$imgType"]
//
//
//        installerOptions += ['--resource-dir', "src/main/resources"]
//        installerOptions += ['--vendor', 'Kidesoft']
//        installerOptions += ['--app-version', '2.0.0']
//        //installerOptions += ['--module-path', 'build/image/lib']
//
////        if(currentOs.windows) {
////            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
////        }
////        else if (currentOs.linux) {
////            installerOptions += ['--linux-package-name', 'ticket-place-adapter','--linux-shortcut']
////        }
////        else if (currentOs.macOsX) {
////            installerOptions += ['--mac-package-name', 'ticket-place-adapter']
////        }
//    }
//}
